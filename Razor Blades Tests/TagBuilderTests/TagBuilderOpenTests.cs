using ToSic.Razor.Blade;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ToSic.Razor.Markup;

namespace Razor_Blades_Tests.TagBuilderTests
{
    [TestClass]
    public class TagBuilderOpenTests: TagTestBase
    {
        [TestMethod]
        public void OpenSimpleTags()
        {
            Is("<p>", new TagBase("p").TagStart);
            Is("<em>", new TagBase("em").TagStart);
            Is("<EM>", new TagBase("EM").TagStart);
            Is("<ng-template>", new TagBase("ng-template").TagStart);
        }


        [TestMethod]
        public void OpenTagsWithId() 
            => Is("<p id='myId'>",
                new TagBase("p").Id("myId").TagStart);

        [TestMethod]
        public void OpenTagsWithClass() 
            => Is("<p class='my-class'>", 
                new TagBase("p").Class("my-class").TagStart);

        [TestMethod]
        public void OpenTagsWithClasses() 
            => Is("<p class='my-class float-right'>", 
                new TagBase("p").Class("my-class float-right").TagStart);

        [TestMethod]
        public void OpenTagsWithIdAndClasses() 
            => Is("<p id='myId' class='my-class float-right'>", 
                new TagBase("p").Id("myId").Class("my-class float-right")
                    .TagStart);

        [TestMethod]
        public void OpenTagsWithAttributeString() 
            => Is("<p data='xyz'>", 
                new TagBase("p").Attr("data='xyz'")
                    .TagStart);

        [TestMethod]
        public void OpenTagsWithAttributeStringAndSpace() 
            => Is("<p data='xyz'>", 
                new TagBase("p").Attr(" data='xyz'")
                    .TagStart);

        [TestMethod]
        public void OpenTagsWithAttributeList()
            => Is("<p data='xyz' kitchen='black'>",
                new TagBase("p").Attr("data", "xyz")
                    .Attr("kitchen", "black")
                    .TagStart);

        [TestMethod]
        public void OpenTagsWithClassIdAndAttributeString() 
            => Is("<p id='myId' class='my-class float-right' data='xyz'>", 
                new TagBase("p")
                    .Id("myId")
                    .Class("my-class float-right")
                    .Attr("data='xyz'")
                    .TagStart);

        [TestMethod]
        public void OpenTagsWithClassIdAndAttributeList() 
            => Is("<p id='myId' class='my-class float-right' data='xyz' kitchen='black'>", 
                new TagBase("p").Id("myId").Class("my-class float-right")
                    .Attr("data", "xyz")
                    .Attr("kitchen", "black")
                    .TagStart);

        [TestMethod]
        public void OpenTagWithSelfClose()
            => Is("<p/>", 
                new TagBase("p", options: new TagOptions {SelfClose = true}).TagStart);

        [TestMethod]
        public void OpenTagsWithIdAndClassesSelfClose()
            => Is("<p id='myId' class='my-class float-right'/>",
                new TagBase("p", options: new TagOptions { SelfClose = true })
                    .Id("myId").Class("my-class float-right").TagStart);


        [TestMethod]
        public void OpenTagsWithClassIdAndAttributeListOptionsQuote() 
            => Is("<p id=\"myId\" class=\"my-class float-right\" data=\"xyz\" kitchen=\"black\">", 
                new TagBase("p", new TagOptions(new AttributeOptions {Quote = "\""}))
                    .Id("myId").Class("my-class float-right")
                    .Attr("data", "xyz")
                    .Attr("kitchen", "black").TagStart
                );

    }
}
